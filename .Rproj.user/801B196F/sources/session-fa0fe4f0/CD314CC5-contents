library(shiny)
library(dplyr)
library(tidyr)

# Define the UI
ui <- fluidPage(
  titlePanel("Daycare Matching Algorithm"),
  
  sidebarLayout(
    sidebarPanel(
      # Input controls will go here
      numericInput("num_individuals", "Number of Individuals", value = 10, min = 1, max = 100),
      numericInput("num_schools", "Number of Schools", value = 5, min = 1, max = 20),
      actionButton("generate", "Generate Data"),
      actionButton("run_algorithm", "Run Matching Algorithm")
    ),
    
    mainPanel(
      # Output displays will go here
      tabsetPanel(
        tabPanel("Individuals", tableOutput("individuals_table")),
        tabPanel("Schools", tableOutput("schools_table")),
        tabPanel("Results", tableOutput("results_table"))
      )
    )
  )
)

# Define the server logic
server <- function(input, output, session) {
  
  # Reactive values to store our data
  rv <- reactiveValues(
    individuals = NULL,
    schools = NULL,
    matches = NULL
  )
  
  # Generate sample data when the button is clicked
  observeEvent(input$generate, {
    rv$individuals <- generate_individuals(input$num_individuals, input$num_schools)
    rv$schools <- generate_schools(input$num_schools)
  })
  
  # Run the matching algorithm when the button is clicked
  observeEvent(input$run_algorithm, {
    req(rv$individuals, rv$schools)
    rv$matches <- run_matching_algorithm(rv$individuals, rv$schools)
  })
  
  # Display the individuals table
  output$individuals_table <- renderTable({
    req(rv$individuals)
    rv$individuals
  })
  
  # Display the schools table
  output$schools_table <- renderTable({
    req(rv$schools)
    rv$schools
  })
  
  # Display the results table
  output$results_table <- renderTable({
    req(rv$matches)
    rv$matches
  })
}


generate_individuals <- function(num_individuals, num_schools) {
  individuals <- tibble(
    id = 1:num_individuals,
    social_group = sample(c("A", "B", "C"), num_individuals, replace = TRUE),
    priority_score = round(runif(num_individuals, 0, 100), 2),
    days_needed = sample(1:5, num_individuals, replace = TRUE)
  )
  
  # Generate ordered preferences for schools
  preferences <- replicate(num_individuals, sample(1:num_schools)) %>%
    as.data.frame() %>%
    setNames(paste0("pref_", 1:num_schools))
  
  individuals <- bind_cols(individuals, preferences)
  
  return(individuals)
}

generate_schools <- function(num_schools) {
  schools <- tibble(
    id = 1:num_schools,
    name = paste("School", LETTERS[1:num_schools]),
    total_capacity = sample(20:50, num_schools, replace = TRUE)
  )
  
  # Generate buckets with capacities and eligibility rules
  buckets <- map(1:num_schools, function(school_id) {
    tibble(
      bucket_id = 1:3,
      capacity = round(schools$total_capacity[school_id] * c(0.5, 0.3, 0.2)),
      eligible_groups = list(
        c("A", "B", "C"),
        c("B", "C"),
        c("C")
      )
    )
  })
  
  schools$buckets <- buckets
  
  return(schools)
}



run_matching_algorithm <- function(individuals, schools) {
  matches <- tibble(
    individual_id = integer(),
    school_id = integer(),
    bucket_id = integer()
  )
  
  # Sort individuals by priority score (descending)
  individuals <- individuals %>% arrange(desc(priority_score))
  
  for (i in 1:nrow(individuals)) {
    individual <- individuals[i, ]
    
    for (pref in 1:ncol(individuals %>% select(starts_with("pref_")))) {
      school_id <- individual[[paste0("pref_", pref)]]
      school <- schools %>% filter(id == school_id)
      
      for (bucket in 1:nrow(school$buckets[[1]])) {
        bucket_info <- school$buckets[[1]][bucket, ]
        
        if (individual$social_group %in% bucket_info$eligible_groups[[1]] &&
            bucket_info$capacity > 0) {
          # Match found
          matches <- matches %>% add_row(
            individual_id = individual$id,
            school_id = school_id,
            bucket_id = bucket_info$bucket_id
          )
          
          # Update school capacity
          schools$buckets[[school_id]]$capacity[bucket] <- 
            schools$buckets[[school_id]]$capacity[bucket] - 1
          
          # Break out of both loops
          break
        }
      }
      
      if (nrow(matches) == i) break  # Individual matched, move to next
    }
  }
  
  return(matches)
}



# Run the Shiny app
shinyApp(ui = ui, server = server)

# Helper functions (to be implemented)
generate_individuals <- function(num_individuals, num_schools) {
  # TODO: Implement this function
}

generate_schools <- function(num_schools) {
  # TODO: Implement this function
}

run_matching_algorithm <- function(individuals, schools) {
  # TODO: Implement the matching algorithm
}
